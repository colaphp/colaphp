#!/usr/bin/env php
<?php

require __DIR__ . '/vendor/autoload.php';

use Doctrine\DBAL\DriverManager;
use Doctrine\Migrations\Configuration\Migration\ConfigurationArray;
use Doctrine\Migrations\Configuration\Migration\ExistingConfiguration;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Configuration\Connection\ExistingConnection;
use Doctrine\Migrations\Tools\Console\Command;
use Swift\Foundation\Console\ServeCommand;
use Symfony\Component\Console\Application;

try {
    require_once __DIR__ . '/bootstrap/app.php';
    $database = require __DIR__ . '/config/database.php';
    $connection = DriverManager::getConnection($database['migrations']['connection']);
    $configurations = (new ConfigurationArray($database['migrations']['options']))->getConfiguration();
    $config = new ExistingConfiguration($configurations);
    $dependencyFactory = DependencyFactory::fromConnection($config, new ExistingConnection($connection));

    $cli = new Application('Console Tools');
    $cli->setCatchExceptions(true);

    // register commands
    $cli->add(new ServeCommand());
    $commands = glob(app_path('Console/Commands/*.php'));
    foreach ($commands as $file) {
        $file = str_replace('\\', '/', $file);
        $result = preg_match('/(app\/Console\/Commands\/.+?)\.php/', $file, $matches);
        if ($result !== false && isset($matches[1])) {
            $command = ucfirst(str_replace('/', '\\', $matches[1]));
            $cli->add(new $command());
        }
    }
    $cli->addCommands([
        new Command\DumpSchemaCommand($dependencyFactory),
        new Command\ExecuteCommand($dependencyFactory),
        new Command\GenerateCommand($dependencyFactory),
        new Command\LatestCommand($dependencyFactory),
        new Command\ListCommand($dependencyFactory),
        new Command\MigrateCommand($dependencyFactory),
        new Command\RollupCommand($dependencyFactory),
        new Command\StatusCommand($dependencyFactory),
        new Command\SyncMetadataCommand($dependencyFactory),
        new Command\VersionCommand($dependencyFactory),
    ]);

    $cli->run();
} catch (\Doctrine\DBAL\Exception|Exception $e) {
    echo $e->getMessage() . PHP_EOL;
}
